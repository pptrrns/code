{
  "folders": [
    {
      "name": "RStudio",
      "parentId": null,
      "isOpen": true,
      "isSystem": false,
      "defaultLanguage": "r",
      "id": "DQZWqrP5",
      "createdAt": 1667787402933,
      "updatedAt": 1667850231286,
      "index": 0
    },
    {
      "name": "Commands",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "defaultLanguage": "markdown",
      "id": "kUTrDM6K",
      "createdAt": 1667787411771,
      "updatedAt": 1668023356756,
      "index": 1
    },
    {
      "name": "LaTex",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "defaultLanguage": "plain_text",
      "id": "KPnlb64o",
      "createdAt": 1703835264009,
      "updatedAt": 1703835272800
    }
  ],
  "snippets": [
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "kUTrDM6K",
      "tagsIds": [
        "IyXoXMjs",
        "ZuysXm8A"
      ],
      "description": "Code for downloading websites as .html files.",
      "name": "wget",
      "content": [
        {
          "label": "commands",
          "language": "markdown",
          "value": "# install\nbrew install wget\n\n# code\nwget -O YOUR-FILENAME.html URL\nwget -P path/to/save/files URL"
        },
        {
          "label": "example",
          "language": "markdown",
          "value": "# example\nwget -P /Users/jtorrensh/Desktop/wget https://portalanterior.ine.mx/documentos/RESELEC/estadisticas2003/diputados_mr/casillas/1-01.html"
        }
      ],
      "id": "h72dK0kS",
      "createdAt": 1667787465004,
      "updatedAt": 1668233810273
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "DQZWqrP5",
      "tagsIds": [
        "OJvlNdx5",
        "Z7C4DS8E"
      ],
      "description": "A list of useful commands",
      "name": "useful commands",
      "content": [
        {
          "label": "workflow",
          "language": "r",
          "value": "#--------------- Load packages\n\ninstalled.packages()\nlibrary(\"Lorem Ipsum\")\n\n# or\n\nif(!require(pacman)) install.packages(\"pacman\")\npacman::p_load(library1, library2, library3)\n\n#--------------- Directory\n\nsetwd(\"/path/to/your/directory\")\n\ngetwd()\n\ndir() # or\ndir(\"/path/to/directory\")\n\nlist.files() #  Lists files in a directory\nlist.dirs()  # Lists subdirectories within a directory\nls() # Lists objects in the current workspace\n\n#--------------- Import data\n\n# Import csv file\ndata.name <-  read.csv(\"path/to/file.csv\")\n\n# Import data as date\ndata <- read.csv((\"path/to/file.csv\"), stringsAsFactors = FALSE)\n\ndf$date <- as.Date(df$date, format = \"%d/%m/%y\")\n\n# Import xlsx list\nfiles <- list(df1 = (\"path/to/file.xlsx\"),\n              da2 = (\"path/to/file.xlsx\")))\n\ndata <- read_xlsx(files$df1, sheet = 1)\n\n# Unzip files\nlibrary(here)\nunzip(\"path/to/zip\", \"file_name.csv\",\n      exdir = \"path/to/unzip\")\n      \nfiles <- list(df1 = here(\"path/to/unzip/df1\"),\n              df2 = here(\"path/to/unzip/df2\"))\n              \ndata <- read.csv(files$df1)\n\n#--------------- Import source\n\nsource(\"path/to/theme.R\")\nsource(\"path/to/functions.R\")\n\n#--------------- Export\n\nwrite.csv(df, \"path/to/file.csv\", row.names = FALSE) # Export csv\n\nggsave(\"/path/plot.png\", width = 16, height = 10, dpi = 600) # Export ggplot\n\n#--------------- Clean environment\n\nrm(list= ls()[!(ls() %in% c('Lorem Ipsum','Lorem Ipsum'))])\n\n#--------------- Help\n\nhelp(\"mean\") # Accesses help documentation for a function (e.g., \"mean\").\n\nhelp(package = \"stats\") # Accesses help documentation for a package (e.g., \"stats\")."
        },
        {
          "label": "operators / usuful commands",
          "language": "r",
          "value": "# Operators are used to perform various operations on variables and data. \n\n# Here is a detailed list of some logical, arithmetic, and boolean operators in R:\n\n #--------------- Arithmetic\n \n# Addition (+)\n# Subtraction (-)\n# Multiplication (*)\n# Division (/)\n# Exponentiation (**) or (^)\n# Modulus (remainder) (%%)\n# Integer division (%/%)\n\n#--------------- Boolean\n\n# Equal to (==)\n# Not equal to (!=)\n# Less than (<)\n# Greater than (<)\n# Less than or equal to (<=)\n# Greater than or equal to (>=)\n\n#--------------- Logical\n\n# Logical AND (&)\n# Logical OR (|)\n# Logical NOT / negation (!)\n# Membership operator (checks if an element is in a set) (%in%)\n\n#--------------- Assignment\n\n# Left assignment (<-) or (=)\n# Right assignment (->)\n\n#--------------- Concatenation\n\n# Vector concatenation c()\n# Sequence (:)\n\nna.rm = TRUE # Remove NA values. When set to TRUE, it instructs the function to exclude missing values (represented as NA) from its calculations.\n\n#--------------- Statistics\n\nmean(x)  # Mean\nsummary(df) # Provides a summary of various statistics for a dataset\ndensity(rnorm(100))) # Estimates and plots the density of a numerical vector\ncumsum() # Calculates cumulative sums\ncummean() # Calculates cumulative means\n\n#--------------- Data Checking Functions\n\n# Checks if values are ––––––\nis.integer() \nis.numeric()\nis.character()\nis.factor()\nis.logical()\n\n# Checks for missing (NA) values\nis.na() # Returns a logical vector indicating missing values.\n\n# Checks for NULL values\nis.null()\n\n#--------------- Data Conversion Functions\n\n# Converts values to ––––––\nas.integer(3.14) # Converts 3.14 to the integer 3\nas.numeric(\"5\") # Converts the string \"5\" to the number 5\nas.character(TRUE) # Converts TRUE to the string \"TRUE\"\nas.factor(c(\"x1\", \"x2\", \"x3\"))\n\n#  Converts values to logical (TRUE/FALSE)\nas.logical()\nas.logical(0) # Converts 0 to FALSE\n\n# Converts values to NULL\nas.null()\nas.null(x) # Sets the value of x to NULL"
        }
      ],
      "id": "trWQpM5O",
      "createdAt": 1667794687865,
      "updatedAt": 1705771746883
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "kUTrDM6K",
      "tagsIds": [
        "ZuysXm8A",
        "CAuKhm2A"
      ],
      "description": "Let’s Git Started -- Beginner’s Guide to Git & Github",
      "name": "git started",
      "content": [
        {
          "label": "Fragment 1",
          "language": "markdown",
          "value": "# cambia de directorio\n~ % cd ~/path/to/repo\t\t\n\n# lista archivos del directorio\n% ls\t\t\t\t\t\t\t\t\t\n\n# da el estado del repositorio\ngit status\n\n# sube todo lo que haya cambiado al estrado\ngit add .\n\n# saca foto y la almacena en la bitácora con un comentario \ngit commit -m 'Comentario'  \n\n# lista los alias del repositorio en tu máquina y en github ( master y origin por default)\ngit remote -v\n\n# jala cambios de origin (alias del repo en tu github) a master (alias del repo en tu máquina)\ngit pull origin master \n\n# empuja cambios de master (alias del repo en tu máquina) a origin (alias del repo en tu github)\ngit push origin master\n\n# visita la foto identificada por un número\ngit checkout num-del-commit\n\n# regresa a la foto más reciente del repositorio\ngit checkout master\n\n# listar commits de manera abreviada\ngit log --pretty=oneline --abbrev-commit\n\n# Undoes all commits after [commit], preserving changes locally \ngit reset [commit]\n\n# Discards all history and changes back to the specified commit\ngit reset --hard [commit]\n\n# forzar un push (cuando se borra un commit local)\n## Revisar: https://7sabores.com/blog/como-revertir-un-push-git\ngit push origin +master\ngit push --force\n\n# remove a file, (rm data.tmp)\nrm [file]\t\n\n# remove with confirmation\nrm -i [file]\n\n# lets you open up the directory in finder\nopen.\n\n# allows you to view the registration details of a given domain, such as the name, address, and phone number of the registrant (whois google.com)\nwhois \n\n# prompts your Mac to speak out loud in its native voice whatever you\nwrite after the say prompt (say Hello My Name is Alf)\nsay\n\n# clean terminal\ncommand+K"
        }
      ],
      "id": "rd2lTa0N",
      "createdAt": 1667826253726,
      "updatedAt": 1705715358497
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "DQZWqrP5",
      "tagsIds": [
        "OJvlNdx5",
        "Z7C4DS8E"
      ],
      "description": "The unikn package provides useful color functions — by defining dedicated colors and color palettes, and commands for finding, changing, viewing, and using them — and styled text elements (e.g., for marking, underlining, or plotting colored titles) in R.",
      "name": "colors palette",
      "content": [
        {
          "label": "code",
          "language": "r",
          "value": "#--------------- Library\n\nlibrary(unikn)\n\n#--------------- Define colors and color names -- as vectors\n\npaleta.colores <- c(\"#000000\", # Color 1\n\t\t\t\t\t\t\t\t\t\t\"#000000\", # Color 2\n                    \"#000000\") # Color 3\n\npaleta.degradado <- usecol(c(\"#000000\", \"#000000\", \"#000000\"), n = 4)\n\n#--------------- See color palettes\n\nseecol(paleta.colores, \t\t\t# A color palette\n\t\t\t col_brd = \"white\", \t# Color and width of borders\n       lwd_brd = 5, \t\t\t\t\n       title = \"\") \t\t\t\t\t# Plot title"
        },
        {
          "label": "example code",
          "language": "r",
          "value": "#--------------- Example code\n\ncolor_google <- c(\"#4285f4\", \"#34a853\", \"#fbbc05\", \"#ea4335\")\nnames_google <- c(\"blueberry\", \"sea green\", \"selective yellow\", \"cinnabar\")\n\npal_google <- newpal(color_google, names_google)\n\n#--------------- Inspect color palette\n\nseecol(pal_google, \n       col_brd = \"white\", lwd_brd = 8,\n       main = \"Colors of the Google logo\")\n       \nolives  <- grepal(\"olive\", plot = FALSE)\noranges <- grepal(\"orange\", plot = FALSE)\n\n#--------------- See color palettes -- more than 1 palette\n\nseecol(pal = list(olives, oranges), \n       pal_names = c(\"olives\", \"oranges\"), \n       main = \"Comparing olives with oranges\")"
        }
      ],
      "id": "Ay5h8Upn",
      "createdAt": 1667850235165,
      "updatedAt": 1705715201829
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "DQZWqrP5",
      "tagsIds": [
        "OJvlNdx5",
        "Z7C4DS8E"
      ],
      "description": "Code for styling plots in RStudio.",
      "name": "style",
      "content": [
        {
          "label": "axis",
          "language": "r",
          "value": "#--------------- Axis limits\n\nylim(ymin, yend) \nxlim(xmin, xend)\n\n# Axis scale dates\nscale_x_date(date_breaks = \"1 week\", date_labels = \"%d/%m\")\n\n# Axis limits continuous\nscale_y_continuous(limits=c(0,0), breaks=0:0)\nscale_y_continuous(breaks = seq(0, 0, by = 0))\n\n#--------------- Title, subtitle & axis names\n\nlabs(title = \"Lorem Ipsum\",\n\t\t subtitle = \"Lorem Ipsum\",\n     caption = \"Lorem Ipsum\",\n\t\t x = \"Lorem Ipsum\",\n     y = \"Lorem Ipsum\")"
        },
        {
          "label": "theme",
          "language": "r",
          "value": "#--------------- Theme\n\n tema <- theme_ipsum(axis_col = \"white\") +\n    theme(\n        plot.title = element_text(size = 24, color = \"#1B2128\", face = 'bold'),\n        plot.subtitle = element_text(size = 14, color = \"#747577\"),\n        plot.caption = element_text(size = 11, color = \"#747577\", face = \"plain\"),\n        axis.title.x = element_text(size = 13, color = \"#1B2128\", face = \"bold\", hjust = .5, margin = margin(t = .5, unit = \"cm\")),\n        axis.text.x = element_text(size = 12, color = \"#1B2128\"),\n        axis.title.y = element_text(size = 13, color = \"#1B2128\", face = \"bold\", hjust = .5, margin = margin(r = .5, unit = \"cm\")),\n        axis.text.y = element_text(size = 12, color = \"#1B2128\"),\n        legend.title = element_text(size = 13, color = \"#1B2128\", face = \"bold\"),\n        legend.text = element_text(size = 11, color = \"#1B2128\"),\n        legend.position = \"bottom\",\n        plot.margin = margin(1, 1, 1, 1, \"cm\"),\n        strip.text = element_text(color = \"#1B2128\", size = 13, face =\"bold\", hjust = .5),\n        panel.grid = element_line(colour = \"white\"),\n        panel.grid.major = element_line(colour = \"white\"),\n        panel.grid.minor = element_line(colour = \"white\"),\n        plot.background = element_rect(color = \"white\", fill = \"white\")\n)\n\n#--------------- Theme grid\n\ntema.grid <- theme_ipsum(axis_col = \"#E0E0DD\") +\n    theme(\n        plot.title = element_text(size = 24, color = \"#1B2128\", face = 'bold'),\n        plot.subtitle = element_text(size = 14, color = \"#747577\"),\n        plot.caption = element_text(size = 11, color = \"#747577\", face = \"plain\"),\n        axis.title.x = element_text(size = 13, color = \"#1B2128\", face = \"bold\", hjust = .5, margin = margin(t = .5, unit = \"cm\")),\n        axis.text.x = element_text(size = 12, color = \"#1B2128\"),\n        axis.title.y = element_text(size = 13, color = \"#1B2128\", face = \"bold\", hjust = .5, margin = margin(r = .5, unit = \"cm\")),\n        axis.text.y = element_text(size = 12, color = \"#1B2128\"),\n        legend.title = element_text(size = 13, color = \"#1B2128\", face = \"bold\"),\n        legend.text = element_text(size = 11, color = \"#1B2128\"),\n        legend.position = \"bottom\",\n        plot.margin = margin(1, 1, 1, 1, \"cm\"),\n        strip.text = element_text(color = \"#1B2128\", size = 13, face =\"bold\", hjust = .5),\n        panel.grid = element_line(colour = \"#E0E0DD\"),\n        panel.grid.major = element_line(colour = \"#E0E0DD\"),\n        panel.grid.minor = element_line(colour = \"#E0E0DD\"),\n        plot.background = element_rect(color = \"white\", fill = \"white\")\n)"
        }
      ],
      "id": "uCRZc6OI",
      "createdAt": 1667883669622,
      "updatedAt": 1705769328113
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "kUTrDM6K",
      "tagsIds": [
        "ZuysXm8A",
        "IyXoXMjs"
      ],
      "description": "Library to convert HTML Tables to Excel file.",
      "name": "html2excel",
      "content": [
        {
          "label": "commands",
          "language": "markdown",
          "value": "# install\npip install html2excel\n\n# code\npython3 -m html2excel input_file output_file"
        },
        {
          "label": "as package",
          "language": "markdown",
          "value": "# using as package\nfrom html2excel import ExcelParser\n\ninput_file = '/tmp/text_file.html'\noutput_file = '/tmp/converted_file.xlsx'\n\nparser = ExcelParser(input_file)\nparser.to_excel(output_file)"
        },
        {
          "label": "example",
          "language": "markdown",
          "value": "# example\npython3 -m html2excel \"/Users/jtorrensh/Desktop/wget2003/1-01.html\" \"/Users/jtorrensh/Desktop/wget2003/output/1-01.csv\""
        }
      ],
      "id": "3UXcG9fP",
      "createdAt": 1668023286844,
      "updatedAt": 1668233802084
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "kUTrDM6K",
      "tagsIds": [
        "ZuysXm8A",
        "IyXoXMjs"
      ],
      "description": "A command line spreadsheet format converter.",
      "name": "ssconvert",
      "content": [
        {
          "label": "commands",
          "language": "markdown",
          "value": "# install\nbrew install gnumeric\n\n# convert all files from xlsx to csv\nssconvert *.xlsx *.csv\n\n# concatenate all csv files and name the new file all.csv\ncat *.csv >> all.csv\n\n# list the file all.csv\nls all.csv\n\n# other info\nhttps://linux.die.net/man/1/ssconvert"
        },
        {
          "label": "example",
          "language": "plain_text",
          "value": "# convert all file from xlsx to csv\nssconvert 1-01.xlsx 1-01.csv"
        }
      ],
      "id": "1KtvDkec",
      "createdAt": 1668139525990,
      "updatedAt": 1687551981964
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "DQZWqrP5",
      "tagsIds": [
        "OJvlNdx5",
        "Z7C4DS8E"
      ],
      "description": "Plot gallery",
      "name": "ggplot",
      "content": [
        {
          "label": "geom_bar",
          "language": "r",
          "value": "#--------------- Bar plot\n\ndf %>% \n  ggplot(aes(x = col_name , y = col_name, fill = col_name))\n    geom_bar(position = \"stack\", stat = \"identity\", alpha = 1) # position stack / dodge\n\n#--------------- Reorder bars\ndf %>% \n\tggplot(aes(x = reorder(axis_x, -axis_y), y = axis_y, fill = col_name))\n\ndf %>% \n  ggplot(aes(x = axisx, y = axisy, fill = reorder(axisx, -axisy)))\n\n#--------------- Color\n\nscale_fill_manual(values = c(colors-palette))\n\n#--------------- Facet wrap\n\nfacet_wrap(~ col_name, ncol = 2, strip.position = \"top\", scales = \"free_x\")\n\n#--------------- Text\n\ngeom_text(aes(label = axis_y), color = \"#000000\", size = 1, position = position_dodge(0.9), vjust = -1)\n\ngeom_text(aes(label = axis_y), color = \"#000000\", size = 1, position = position_identity(), hjust = -.5)\n\ngeom_text(aes(x = col_name, y = col_name, label = n¡col_name, group = col_name), colour = \"black\", size = 2.5, \n\t\t\t\t\t\t\tcheck_overlap = TRUE, position = position_stack(vjust = .5)\n\n#--------------- Axis\n\ncoord_flip()"
        },
        {
          "label": "geom_line",
          "language": "r",
          "value": "#--------------- Line plot\n\ndt %>%\n\tggplot( aes(axis_x, axis_y)) +\n  \tgeom_line(color = \"color\", size = 1, alpha = 1)\n\n#--------------- Create a circle -- date\n\nannotate(geom = \"point\", x = as.Date(\"yyyy-mm-dd\"), \n\t\t\t\t\ty = y, size = 10, shape = 21, fill = \"transparent\")\n\n# Add text to circle -- date\nannotate(geom = \"text\", x = as.Date(\"yyyy-mm-dd\"), \n\t\t\t\t\ty = y, label = \"Lorem Ipsum\")\n\n#--------------- Axis\n\ncoord_flip()"
        }
      ],
      "id": "XhBOzAag",
      "createdAt": 1686102344686,
      "updatedAt": 1705769396781
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "DQZWqrP5",
      "tagsIds": [
        "OJvlNdx5",
        "Z7C4DS8E"
      ],
      "description": "Useful functions when working with data",
      "name": "dplyr",
      "content": [
        {
          "label": "columns",
          "language": "r",
          "value": "#--------------- Select\n\ndf %>% select(-c(col_name))\ndf %>% select(c(col_name))\ndf %>% select((3:10), (26:41), 43) # Select by position\ndf %>% select((col_name1:col_name10)) # Select by name / position\ndf %>% select(-(col_name1:col_name10)) # Selects columns except those from year to day.\ndf %>% select(contains(\"Lorem Ipsum\")) # Selects columns containing \"Lorem Ipsum\"\ndf %>% select(ends_with(\"_lipsum\")) # Selects columns ending with a certain pattern\ndf %>% select(starts_with(\"lipsum_\")) # Selects columns starting with a certain pattern\n\n#--------------- Relocate\n\ndf %>% relocate(col_name, .before = col_name)    \ndf %>% relocate(col_name, .after = col_name)\n\n#--------------- Mutate\n\ndf %>% mutate(new_col = \"Lorem Ipsum\")\ndf %>% mutate(new_col = case_when(col_name == value ~ \"Lorem Ipsum\")                \ndf %>% mutate(new_col = case_when(col_name == \"Lorem Ipsum\" ~ 3))\ndf %>% mutate(new_col = (col_name + col_name)) # Check operator in the useful commands sections\ndf %>% mutate(col_name = excel_numeric_to_date(col_name)) # janitor\ndf %>% mutate(tipo_sec = replace(col_name, col_name == 2, \"Lorem Ipsum\")\n\ndf %>% mutate_if(is.numeric, ~replace(., is.na(.), 0)) # Replace NA values\n\n#--------------- Rename colums\n\ndf %>% rename(new_name = old_name)\n\n#--------------- Operations\n\ndf %>% \n  group_by(col_name) %>% \n  count(col_name2)\n  \ndf %>% # Summarizes data by computing statistics for groups\n  group_by(col_name) %>% \n  summarise(n = sum(col_name))\n  \n#--------------- Data cleaning / Janitor\n\nclean_names(df) # Cleans column names by converting them to lowercase, removing spaces, and replacing special characters with underscores\nremove_empty(df) # Removes rows with all empty values\nget_dupes(my_data, \"name\", \"age\") # Identifies duplicate rows based on specified columns.\n\n#--------------- Create a function\n\nname <- function(df) {\n  df %>%\n  clean_names() %>%\n}\n\n#--------------- Transpose\n\ndf <- as.data.frame(t(df))"
        },
        {
          "label": "rows",
          "language": "r",
          "value": "#--------------- Filter\n\ndf %>% filter(!is.na(col_name)) \ndf %>% filter(!row_number() %in% c(1))\ndf %>% filter(col_name != \"Lorem Ipsum\")\ndf %>% filter(col_name1 == 1, col_name2 == 1, col_name3 > 99) # Check operator in the useful commands sections\ndf %>% filter(col_name %in% c(1, 2))\n\n#--------------- Arrange\n\ndf %>% arrange(col_name) # Orders rows based on variables\ndf %>% arrange(desc(col_name))\n\n#--------------- Remove rows (176 = row number)\n\n# Remove rows (176 = row number)\ndf <-  df[-c(176, 177), ]\n\n# Slice head\nslice_head(n = 0)\n\n#--------------- Bind\n\ndata <-  bind_rows(df1, df1)\n\n#--------------- Row numbers\n\nrow_number() # Assigns unique row numbers\n\n#--------------- Change value \"Lorem Ipsum\" to NA\n\ndf[df == \"Lorem Ipsum\"] <- NA"
        }
      ],
      "id": "kaGVK7Ys",
      "createdAt": 1686104485747,
      "updatedAt": 1705771739708
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "kUTrDM6K",
      "tagsIds": [
        "ZuysXm8A"
      ],
      "description": null,
      "name": "sherlock",
      "content": [
        {
          "label": "Fragment 1",
          "language": "markdown",
          "value": "# clone the repo\n$ git clone https://github.com/sherlock-project/sherlock.git\n\n# change the working directory to sherlock\n$ cd sherlock\n\n# install the requirements\n$ python3 -m pip install -r requirements.txt"
        }
      ],
      "id": "tg8QVkoq",
      "createdAt": 1703197037423,
      "updatedAt": 1703197055936
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "KPnlb64o",
      "tagsIds": [],
      "description": null,
      "name": "thesis commands",
      "content": [
        {
          "label": "Fragment 1",
          "language": "latex",
          "value": "% Section formatting\n\n\\part{Your Part Title}\n\\chapter{Your Chapter Title}\n\\section{Your Section Title}\n\\subsection{Your Subsection Title}\n\\subsubsection{Your Subsubsection Title}\n\\paragraph{Your Paragraph Title}\n\\subparagraph{Your Subparagraph Title}\n\n% Text size\n\n\\Huge\n\\huge\n\\LARGE\n\\Large\n\\large\n\\normalsize\n\\small\n\\footnotesize\n\\scriptsize\n\\tiny\n\n% Font shapes\n\n\\emph{} % This is Italic Shape\n\\scshape{} % This is Small Caps Shape\n\n% New thought block\n\n\\newthought{Your new thought here} \n\n% Analytical Index entries\n\n\\analyticentry{Your Index Term 1}\n\\analytics{Your Index Term 1}\n\n% Label and References\n\n\\hyperref[tab:figura1]{Figura \\ref{fig:figura1}}\n\n\\label{tab:tabla1} % Table reference\n\\label{apendiceA} % Appendices references\n\\label{introduction} % Chapter reference\n\n% Center environment\n\n\\begin{center}\n  Your centered content goes here\n\\end{center}\n\n% Itemize and enumerate environments\n\n\\begin{itemize}\n  \\item Your item 1\n  \\item Your item 2\n\\end{itemize}\n\n\\begin{enumerate}\n  \\item Your item 1\n  \\item Your item 2\n\\end{enumerate}\n\n% Quote Environment\n\n\\begin{quote}\n  \\lipsum[2]\n\\end{quote}\n\n% Savequote environment\n\n\\begin{savequote}[85mm]\n  \\small{Your quote here.}\n  \\qauthor{Your Author}\n\\end{savequote}\n\n% Equation Environment\n\n\\begin{equation}\nx = 1\n\\end{equation}\n\n% Figure Environment\n\n\\begin{figure}[H]\n    \\centering \n        \\includegraphics[width = \\textwidth]{figures/fig#}\n        \\caption[Lorem Ipsum]{Proin at eros...\n    \\label{fig:figura#}}\n\\end{figure}\n\n% Full page figure Environment\n\n\\newpage\n\\thispagestyle{empty}\n\\begin{landscape}\n\\thispagestyle{empty}\n  \\begin{figure}[p]\n    \\centering\n    \\includegraphics[width = \\linewidth, keepaspectratio]{figures/fig#.png}\n    \\caption[Lorem Ipsum]{Proin at eros...}\n    \\label{fig:figura#}\n  \\end{figure}\n\\end{landscape}\n\n% Code Listing Environment\n\n\\begin{lstlisting}[language = R, caption = Lorem Ipsum]\n\tLorem Ipsum\n\\end{lstlisting}\n\n% Footnotes\n\n\\footnote{Lorem ipsum.}\\textsuperscript{,}\\footnote{Lorem ipsum.}\n\n\\footnote{\\lipsum[8]}\n\n% References\n\n% The references.bib file contains the references. By default, the references are cited in the APSA style. \n% Use the command \\citep{} to manage the references.\n\n\\citep{BibTeX key, BibTeX key}\n\n\\citep[pg.~32]{BibTeX key}\n\n\\citep{BibTeX key}\n\n\\citep[\\emph{véase}][pg.~5]{BibTeX key}\n\n\\citep[Chap.~5]{BibTeX key}\n\n% Page settings\n\n\\blankpage % Add a blank page\n\\newpage % Add a new page"
        }
      ],
      "id": "ppG31YcS",
      "createdAt": 1703835274418,
      "updatedAt": 1704166923704
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "DQZWqrP5",
      "tagsIds": [
        "OJvlNdx5",
        "Z7C4DS8E"
      ],
      "description": null,
      "name": "electoral",
      "content": [
        {
          "label": "Fragment 1",
          "language": "r",
          "value": "# pmap(), que se utiliza para aplicar una función a múltiples argumentos de una manera paralela. En este caso, se está aplicando la función across() a una lista de nombres de variables: \"pan\", \"pri\", \"prd\", etc. La función across() se utiliza para aplicar una operación a múltiples columnas seleccionadas por su nombre. Dentro de across(), se utiliza una expresión lambda (~) junto con la función names() y which.max() para obtener el nombre de la columna con el valor máximo en cada fila. La función c(...) se utiliza para referirse a los argumentos que se pasan a través de pmap().\n# La segunda línea de código utiliza la función ifelse() para verificar si el valor de \"primera_fuerza\" es igual a \"character(0)\". Si es así, se asigna el valor NA (ausencia de valor). Esto se hace para manejar el caso en el que no haya ningún valor máximo encontrado en las columnas especificadas.\n# La tercera línea de código utiliza la función unlist() para convertir el objeto \"primera_fuerza\" en una lista unidimensional. Esto se hace para asegurarse de que \"primera_fuerza\" sea un vector de valores individuales en lugar de una lista.\n\nmutate(primera_fuerza = pmap(across(c(\"pan\", \"pri\", \"prd\",\"pvem\", #  variable primera fuerza\n                                        \"pt\", \"panal\", \"morena\",\"pri_pvem_panal\",\n                                        \"pri_pvem\", \"pri_panal\",\"pvem_panal\")), ~ names(c(...)[which.max(c(...))]))          \n       primera_fuerza = ifelse(primera_fuerza ==\"character(0)\", NA, primera_fuerza),\n       primera_fuerza = unlist(primera_fuerza))\n\nmutate_all(~ifelse(is.nan(.), 0, .)) # reemplazer NaN por 0's\nmutate(total_votos_p = rowSums(select(., (28:40)))) # crear total de votos por partido sumando de la columa 28:40"
        }
      ],
      "id": "o9O0eu0j",
      "createdAt": 1705714387242,
      "updatedAt": 1705714411919
    }
  ],
  "tags": [
    {
      "name": "web scraping",
      "id": "IyXoXMjs",
      "createdAt": 1667787604172,
      "updatedAt": 1667787604172
    },
    {
      "name": "R",
      "id": "Z7C4DS8E",
      "createdAt": 1667794793146,
      "updatedAt": 1667794793146
    },
    {
      "name": "RStudio",
      "id": "OJvlNdx5",
      "createdAt": 1667794838275,
      "updatedAt": 1667794838275
    },
    {
      "name": "commands",
      "id": "ZuysXm8A",
      "createdAt": 1667826598871,
      "updatedAt": 1667826598871
    },
    {
      "name": "git & github",
      "id": "CAuKhm2A",
      "createdAt": 1668233892571,
      "updatedAt": 1668233892571
    }
  ]
}